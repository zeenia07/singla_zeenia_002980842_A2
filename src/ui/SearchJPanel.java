/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.Car;
import model.CarHistory;

/**
 *
 * @author Dell
 */
public class SearchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    CarHistory history;
    ButtonGroup bg = new ButtonGroup();
    public SearchJPanel(CarHistory history) {
        initComponents();
        this.history=history;
        populateTable(history.getCarList());
        addRadio();
        //this.setLocationRelativeTo(null);
        currentDate();
    }
    
    public void currentDate(){
        Calendar cal = new GregorianCalendar();
        int month = cal.get(Calendar.MONTH);
        int year = cal.get(Calendar.YEAR);
        int day = cal.get(Calendar.DAY_OF_MONTH);
        int second = cal.get(Calendar.SECOND);
        int minute = cal.get(Calendar.MINUTE);
        int hour = cal.get(Calendar.HOUR);
        
        txtLastUpdated.setText((month+1)+"/"+day+"/"+year+ " " + hour+":"+(minute)+":"+second+" Hrs" );
        
    }
    private void addRadio(){
        bg.add(jRadioAvailable);
        bg.add(jRadioNonAvailable);
        bg.add(jRadioNone);
}
    
    private String selectRadio(){
        if(jRadioAvailable.isSelected()){
            return "Available";
        }
        else if(jRadioNonAvailable.isSelected()){
            return "Booked";
        }
        else if(jRadioNone.isSelected()){
            return "None";
        }
        else{
            return "None";
        }
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblSelectBrand = new javax.swing.JLabel();
        lblSearchSerialNo = new javax.swing.JLabel();
        lblSearchModelNo = new javax.swing.JLabel();
        txtSearchModelNo = new javax.swing.JTextField();
        lblSearchMfgYear = new javax.swing.JLabel();
        lblSearchMinSeats = new javax.swing.JLabel();
        txtSearchMinSeats = new javax.swing.JTextField();
        lblViewMaintCerti = new javax.swing.JLabel();
        lblSearchMaxSeats = new javax.swing.JLabel();
        txtSearchMaxSeats = new javax.swing.JTextField();
        txtSearchSerialNo = new javax.swing.JTextField();
        jSearchMaintCertiCheckBox = new javax.swing.JCheckBox();
        lblSearchAvailability = new javax.swing.JLabel();
        txtSearchCity1 = new javax.swing.JTextField();
        txtSearchCity = new javax.swing.JTextField();
        lblSearchCity = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchCars = new javax.swing.JTable();
        txtSearchYear = new javax.swing.JTextField();
        lblSeats = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        txtSearchBrand = new javax.swing.JTextField();
        jRadioAvailable = new javax.swing.JRadioButton();
        jRadioNonAvailable = new javax.swing.JRadioButton();
        jRadioNone = new javax.swing.JRadioButton();
        btnReset = new javax.swing.JButton();
        jcheckManufacturers = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableManufacturer = new javax.swing.JTable();
        lblLastUpdated = new javax.swing.JLabel();
        txtLastUpdated = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Browse Cars");

        lblSelectBrand.setText("Brand: ");

        lblSearchSerialNo.setText("Serial No:");

        lblSearchModelNo.setText("Model No:");

        txtSearchModelNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchModelNoActionPerformed(evt);
            }
        });
        txtSearchModelNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchModelNoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchModelNoKeyReleased(evt);
            }
        });

        lblSearchMfgYear.setText("Manufacturing Year:");

        lblSearchMinSeats.setText("Min.");

        lblViewMaintCerti.setText("Valid Maintenance Certificate:");

        lblSearchMaxSeats.setText("Max.");

        txtSearchMaxSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchMaxSeatsActionPerformed(evt);
            }
        });

        txtSearchSerialNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchSerialNoKeyReleased(evt);
            }
        });

        jSearchMaintCertiCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSearchMaintCertiCheckBoxActionPerformed(evt);
            }
        });

        lblSearchAvailability.setText("Availability:");

        txtSearchCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchCityActionPerformed(evt);
            }
        });
        txtSearchCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchCityKeyReleased(evt);
            }
        });

        lblSearchCity.setText("        City:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Cars List");

        tblSearchCars.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial No.", "Brand", "Model No.", "Manufacturing Year", "No. of Seats", "City", "Maintenance", "Availability"
            }
        ));
        jScrollPane1.setViewportView(tblSearchCars);

        txtSearchYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchYearKeyReleased(evt);
            }
        });

        lblSeats.setText("Seats: ");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtSearchBrand.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchBrandKeyReleased(evt);
            }
        });

        jRadioAvailable.setText("Available ");
        jRadioAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioAvailableActionPerformed(evt);
            }
        });

        jRadioNonAvailable.setText("Booked");
        jRadioNonAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioNonAvailableActionPerformed(evt);
            }
        });

        jRadioNone.setText("None");
        jRadioNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioNoneActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jcheckManufacturers.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jcheckManufacturers.setSelected(true);
        jcheckManufacturers.setText("Search by Manufacturers");
        jcheckManufacturers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcheckManufacturersActionPerformed(evt);
            }
        });

        jTableManufacturer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Manufacturers"
            }
        ));
        jScrollPane2.setViewportView(jTableManufacturer);

        lblLastUpdated.setText("Last Updated Time:");

        jSeparator1.setForeground(new java.awt.Color(51, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(249, 249, 249)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnReset)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(lblSearchMfgYear)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(txtSearchYear))
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(lblSelectBrand)
                                                                .addGap(22, 22, 22)
                                                                .addComponent(txtSearchBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addGap(34, 34, 34))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(lblSeats)
                                                        .addGap(5, 5, 5)
                                                        .addComponent(lblSearchMinSeats)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(txtSearchMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(27, 27, 27)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(lblSearchMaxSeats)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(txtSearchMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(btnSearch))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(lblSearchAvailability)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jRadioAvailable)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jRadioNonAvailable)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jRadioNone))
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                            .addComponent(lblLastUpdated)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(txtLastUpdated))
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(lblSearchSerialNo)
                                                            .addGap(39, 39, 39)
                                                            .addComponent(txtSearchSerialNo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGap(18, 18, 18))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblViewMaintCerti)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jSearchMaintCertiCheckBox)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblSearchModelNo, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                                            .addComponent(lblSearchCity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtSearchModelNo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtSearchCity1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtSearchCity, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(276, 276, 276)
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jcheckManufacturers)
                                .addGap(40, 40, 40)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 99, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))))
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSelectBrand)
                            .addComponent(lblSearchSerialNo)
                            .addComponent(lblSearchModelNo)
                            .addComponent(txtSearchModelNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearchSerialNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearchBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblSearchMfgYear)
                                .addComponent(txtSearchYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblLastUpdated)
                                .addComponent(txtLastUpdated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(txtSearchCity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSearchCity)
                            .addComponent(txtSearchCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblViewMaintCerti)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblSearchAvailability)
                                    .addComponent(jRadioAvailable)
                                    .addComponent(jRadioNonAvailable)
                                    .addComponent(jRadioNone))
                                .addComponent(jSearchMaintCertiCheckBox)))))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSeats)
                    .addComponent(lblSearchMinSeats)
                    .addComponent(txtSearchMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchMaxSeats)
                    .addComponent(txtSearchMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(20, 20, 20)
                .addComponent(btnReset)
                .addGap(19, 19, 19)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jcheckManufacturers))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(299, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSearchMaintCertiCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSearchMaintCertiCheckBoxActionPerformed
        // TODO add your handling code here:
        List<Car> carList = history.getCarList();
        List<Car> cars = new ArrayList<>();
        if(jSearchMaintCertiCheckBox.isSelected()){
        
           for(Car car : carList) {
                if(car.getMaintCertiExpiryDate().isAfter(LocalDate.now())) {
                    cars.add(car);
                }
            }
        }
        else{
            for(Car car : carList) {
                if(car.getMaintCertiExpiryDate().isBefore(LocalDate.now())) {
                    cars.add(car);
                }
            }
        }
        populateTable(cars);
    }//GEN-LAST:event_jSearchMaintCertiCheckBoxActionPerformed

    private void txtSearchCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchCityActionPerformed

    private void txtSearchModelNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchModelNoActionPerformed
        // TODO add your handling code here:
        //String modelNo = txtSearchModelNo.getText();
        //populateTable(modelNo);
    }//GEN-LAST:event_txtSearchModelNoActionPerformed

    private void txtSearchModelNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchModelNoKeyPressed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_txtSearchModelNoKeyPressed

    private void txtSearchModelNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchModelNoKeyReleased
        // TODO add your handling code here:
        
        List<Car> carList = history.getCarList();
        List<Car> cars = new ArrayList<>();
        for(Car car : carList) {
            if(car.getModelNo().equalsIgnoreCase(txtSearchModelNo.getText())) {
                cars.add(car);
            }
        }
        populateTable(cars);
        
    }//GEN-LAST:event_txtSearchModelNoKeyReleased

    private void txtSearchYearKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchYearKeyReleased
        // TODO add your handling code here:
        
        List<Car> carList = history.getCarList();
        List<Car> cars = new ArrayList<>();
        for(Car car : carList) {
            if(car.getManufacturing_date().equals(txtSearchYear.getText())) {
                cars.add(car);
            }
        }
        populateTable(cars);
    }//GEN-LAST:event_txtSearchYearKeyReleased

    private void txtSearchSerialNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchSerialNoKeyReleased
        // TODO add your handling code here:
       
        List<Car> carList = history.getCarList();
        List<Car> cars = new ArrayList<>();
        for(Car car : carList) {
            if(car.getSerialNo() ==  Integer.parseInt(txtSearchSerialNo.getText())) {
                cars.add(car);
            }
        }
        populateTable(cars);
       
    }//GEN-LAST:event_txtSearchSerialNoKeyReleased

    //availability
    private void filter(String query){
        DefaultTableModel model = (DefaultTableModel)tblSearchCars.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        tblSearchCars.setRowSorter(tr);
        if(query !="None"){
            tr.setRowFilter(RowFilter.regexFilter(query));
        }
        else{
            tblSearchCars.setRowSorter(tr);
        }
    }
    private void txtSearchCityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchCityKeyReleased
        // TODO add your handling code here:
       /* DefaultTableModel model = (DefaultTableModel)tblSearchCars.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        tblSearchCars.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(txtSearchCity.getText().trim()));*/
       
       List<Car> carList = history.getCarList();
        List<Car> cars = new ArrayList<>();
        for(Car car : carList) {
            if(car.getCity().equalsIgnoreCase(txtSearchCity.getText())) {
                cars.add(car);
            }
        }
        populateTable(cars);
    }//GEN-LAST:event_txtSearchCityKeyReleased

    private void txtSearchMaxSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchMaxSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchMaxSeatsActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        //DefaultTableModel model = (DefaultTableModel)tblSearchCars.getModel();
        //TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        //tblSearchCars.setRowSorter(tr);
        Integer minSeat= Integer.parseInt(txtSearchMinSeats.getText().trim());
        Integer maxSeat =Integer.parseInt(txtSearchMaxSeats.getText().trim());
        if(minSeat > maxSeat){
            JOptionPane.showMessageDialog(this, "Minimum seats should be less than Maximum seats.");
        }
        List<Car> carList = history.getCarList();
        List<Car> cars = new ArrayList<>();
        for(Car car : carList) {
            if(car.getNumOfSeats() >= minSeat && car.getNumOfSeats() <= maxSeat) {
                cars.add(car);
            }
        }
        populateTable(cars);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtSearchBrandKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchBrandKeyReleased
        // TODO add your handling code here:
        List<Car> carList = history.getCarList();
        List<Car> cars = new ArrayList<>();
        for(Car car : carList) {
            if(car.getBrand().equalsIgnoreCase(txtSearchBrand.getText())) {
                cars.add(car);
            }

            }
          /*  
            else{
                JOptionPane.showMessageDialog(this, "Invalid brand name.");
            }
*/
        
        populateTable(cars);
    }//GEN-LAST:event_txtSearchBrandKeyReleased

    private void jRadioAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioAvailableActionPerformed
        // TODO add your handling code here:
        String query= selectRadio();
        filter(query);
    }//GEN-LAST:event_jRadioAvailableActionPerformed

    private void jRadioNonAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioNonAvailableActionPerformed
        // TODO add your handling code here:
        String query= selectRadio();
        filter(query);
    }//GEN-LAST:event_jRadioNonAvailableActionPerformed

    private void jRadioNoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioNoneActionPerformed
        // TODO add your handling code here:
        String query= selectRadio();
        filter(query);
    }//GEN-LAST:event_jRadioNoneActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tblSearchCars.getModel();
        model.setRowCount(0);
        List<Car> carList = history.getCarList();
        for(Car c : carList){
            
            Object[] row = new Object[9];
            row[0] = c;
            row[1] = c.getBrand();
            row[2] = c.getModelNo();
            row[3] = c.getManufacturing_date();
            row[4] = c.getNumOfSeats();
            row[5] = c.getCity();
            row[6] = c.getMaintCertiExpiryDate();
            row[7] = c.getAvailability();
            row[8] = "";
            
            model.addRow(row);
        }
    
    }//GEN-LAST:event_btnResetActionPerformed

    private void jcheckManufacturersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcheckManufacturersActionPerformed
        // TODO add your handling code here:
      List<Car> carList = history.getCarList();
      Set<String> carSet = new HashSet<>();
      for(Car car : carList){
       carSet.add(car.getBrand());
      }
       populateSetTable(carSet);
      
    }//GEN-LAST:event_jcheckManufacturersActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioAvailable;
    private javax.swing.JRadioButton jRadioNonAvailable;
    private javax.swing.JRadioButton jRadioNone;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox jSearchMaintCertiCheckBox;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableManufacturer;
    private javax.swing.JCheckBox jcheckManufacturers;
    private javax.swing.JLabel lblLastUpdated;
    private javax.swing.JLabel lblSearchAvailability;
    private javax.swing.JLabel lblSearchCity;
    private javax.swing.JLabel lblSearchMaxSeats;
    private javax.swing.JLabel lblSearchMfgYear;
    private javax.swing.JLabel lblSearchMinSeats;
    private javax.swing.JLabel lblSearchModelNo;
    private javax.swing.JLabel lblSearchSerialNo;
    private javax.swing.JLabel lblSeats;
    private javax.swing.JLabel lblSelectBrand;
    private javax.swing.JLabel lblViewMaintCerti;
    private javax.swing.JTable tblSearchCars;
    private javax.swing.JTextField txtLastUpdated;
    private javax.swing.JTextField txtSearchBrand;
    private javax.swing.JTextField txtSearchCity;
    private javax.swing.JTextField txtSearchCity1;
    private javax.swing.JTextField txtSearchMaxSeats;
    private javax.swing.JTextField txtSearchMinSeats;
    private javax.swing.JTextField txtSearchModelNo;
    private javax.swing.JTextField txtSearchSerialNo;
    private javax.swing.JTextField txtSearchYear;
    // End of variables declaration//GEN-END:variables


   private void populateTable(List<Car> cars) {
        
      DefaultTableModel model = (DefaultTableModel)tblSearchCars.getModel();
        model.setRowCount(0);
        
        for(Car c : cars){
            
            Object[] row = new Object[9];
            row[0] = c;
            row[1] = c.getBrand();
            row[2] = c.getModelNo();
            row[3] = c.getManufacturing_date();
            row[4] = c.getNumOfSeats();
            row[5] = c.getCity();
            row[6] = c.getMaintCertiExpiryDate();
            row[7] = c.getAvailability();
            row[8] = "";
            
            model.addRow(row);
                    
        }
}

    private void populateSetTable(Set<String> cars) {
        DefaultTableModel model = (DefaultTableModel)jTableManufacturer.getModel();
        model.setRowCount(0);
        
        for(String car : cars){
            
            Object[] row = new Object[1];
            row[0] = car;
            model.addRow(row);
                    
        }
    }
}
